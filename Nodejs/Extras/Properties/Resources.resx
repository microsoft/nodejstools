<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="JadeClassLiteral" xml:space="preserve">
    <value>Jade Class Literal</value>
  </data>
  <data name="JadeFilter" xml:space="preserve">
    <value>Jade Filter</value>
  </data>
  <data name="JadeIdLiteral" xml:space="preserve">
    <value>Jade Id Literal</value>
  </data>
  <data name="JadeKeyword" xml:space="preserve">
    <value>Jade Keyword</value>
  </data>
  <data name="JadeVariable" xml:space="preserve">
    <value>Jade Variable</value>
  </data>
  <data name="ReplClearDescription" xml:space="preserve">
    <value>Resets the context object to an empty object and clears any multi-line expression.</value>
  </data>
  <data name="ReplSaveDescription" xml:space="preserve">
    <value>Save the current REPL session to a file.</value>
  </data>
  <data name="ReplSaveFailed" xml:space="preserve">
    <value>Failed to save: '{0}'.</value>
  </data>
  <data name="ReplSaveInvalidFileName" xml:space="preserve">
    <value>Invalid filename: '{0}'.</value>
  </data>
  <data name="ReplSaveNoFileName" xml:space="preserve">
    <value>Save requires a filename.</value>
  </data>
  <data name="ReplSaveSucces" xml:space="preserve">
    <value>Session saved to: '{0}'.</value>
  </data>
  <data name="ReplInfoDescription" xml:space="preserve">
    <value>Show information about the current used Node.js executable.</value>
  </data>
  <data name="ReplNodeError" xml:space="preserve">
    <value>Failed to retrieve Nodejs.exe information.</value>
  </data>
  <data name="ReplNodeInfo" xml:space="preserve">
    <value>Using Node.js exe from: '{0}'</value>
    <comment>template is substituted with a path.</comment>
  </data>
  <data name="ReplNodeVersion" xml:space="preserve">
    <value>Node.js Version: {0}</value>
    <comment>template is substituted with version info</comment>
  </data>
  <data name="NpmReplCommandCompletedWithErrors" xml:space="preserve">
    <value>{0} completed with errors</value>
  </data>
  <data name="NpmSuccessfullyCompleted" xml:space="preserve">
    <value>{0} successfully completed</value>
  </data>
  <data name="NpmExecuteCommand" xml:space="preserve">
    <value>Executes npm command. If solution contains multiple projects, specify target project using .npm [ProjectName] &lt;npm arguments&gt;</value>
  </data>
  <data name="NodejsNotInstalled" xml:space="preserve">
    <value>Could not find a Node.js runtime on your computer.  Please download and install the current Node.js release from https://nodejs.org, or specify the location of your Node.exe in the Visual Studio Node Project's properties page.</value>
  </data>
  <data name="NodeExeDoesntExist" xml:space="preserve">
    <value>Your project is currently configured to look for Node.exe at "{0}" but the file does not exist.</value>
  </data>
  <data name="ReplInitializationMessage" xml:space="preserve">
    <value>Node.js interactive window. Type .help for a list of commands.</value>
  </data>
  <data name="ReplWindowNpmInitNoYesFlagWarning" xml:space="preserve">
    <value>Please run '.npm init -y' to create a new package.json file.</value>
  </data>
  <data name="NpmReplCommandCompletedWithErrors" xml:space="preserve">
    <value>{0} completed with errors</value>
  </data>
  <data name="InteractiveWindowFailedToStartProcessErrorMessage" xml:space="preserve">
    <value>Failed to start interactive process: {0}{1}{2}</value>
  </data>
  <data name="InteractiveWindowNoProcessErrorMessage" xml:space="preserve">
    <value>Current interactive window is disconnected - please reset the process.</value>
  </data>
  <data name="InteractiveWindowProcessExitedMessage" xml:space="preserve">
    <value>The process has exited</value>
  </data>
  <data name="InteractiveWindowTitle" xml:space="preserve">
    <value>Node.js Interactive Window</value>
  </data>
  <data name="NpmSpecifyValidProject" xml:space="preserve">
    <value>Please specify a valid Node.js project or project directory. If your solution contains multiple projects, specify a target project using .npm [ProjectName or ProjectDir] &lt;npm arguments&gt; For example: .npm [MyApp] list.</value>
  </data>
  <data name="NodejsNotInstalledAnyCode" xml:space="preserve">
    <value>Could not find a Node.js runtime on your computer.  Please download and install the current Node.js release from 'https://nodejs.org', or specify the location of your Node.exe in the '{0}' file.</value>
    <comment>Template contains a filename, like launch.json</comment>
  </data>
  <data name="DownloadNodejs" xml:space="preserve">
    <value>Download Node.js</value>
  </data>
  <data name="NodejsNotInstalledInfoBar" xml:space="preserve">
    <value>Could not find a Node.js runtime on your computer. Please install Node.js and restart VS, or specify the location of node.exe in the project properties page.</value>
  </data>
  <data name="ClassificationBlack" xml:space="preserve">
    <value>Node.js Interactive - Black</value>
  </data>
  <data name="ClassificationBlue" xml:space="preserve">
    <value>Node.js Interactive - Blue</value>
  </data>
  <data name="ClassificationCyan" xml:space="preserve">
    <value>Node.js Interactive - Cyan</value>
  </data>
  <data name="ClassificationDarkBlue" xml:space="preserve">
    <value>Node.js Interactive - Dark Blue</value>
  </data>
  <data name="ClassificationDarkCyan" xml:space="preserve">
    <value>Node.js Interactive - Dark Cyan</value>
  </data>
  <data name="ClassificationDarkGray" xml:space="preserve">
    <value>Node.js Interactive - Dark Gray</value>
  </data>
  <data name="ClassificationDarkGreen" xml:space="preserve">
    <value>Node.js Interactive - Dark Green</value>
  </data>
  <data name="ClassificationDarkMagenta" xml:space="preserve">
    <value>Node.js Interactive - Dark Magenta</value>
  </data>
  <data name="ClassificationDarkRed" xml:space="preserve">
    <value>Node.js Interactive - Dark Red</value>
  </data>
  <data name="ClassificationDarkYellow" xml:space="preserve">
    <value>Node.js Interactive - Dark Yellow</value>
  </data>
  <data name="ClassificationError" xml:space="preserve">
    <value>Node.js Interactive - Error</value>
  </data>
  <data name="ClassificationGray" xml:space="preserve">
    <value>Node.js Interactive - Gray</value>
  </data>
  <data name="ClassificationGreen" xml:space="preserve">
    <value>Node.js Interactive - Green</value>
  </data>
  <data name="ClassificationMagenta" xml:space="preserve">
    <value>Node.js Interactive - Magenta</value>
  </data>
  <data name="ClassificationRed" xml:space="preserve">
    <value>Node.js Interactive - Red</value>
  </data>
  <data name="ClassificationWhite" xml:space="preserve">
    <value>Node.js Interactive - White</value>
  </data>
  <data name="ClassificationYellow" xml:space="preserve">
    <value>Node.js Interactive - Yellow</value>
  </data>
</root>