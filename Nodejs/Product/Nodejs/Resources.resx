<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LaunchUrlToolTip" xml:space="preserve">
    <value>Specifies the URL to open in the browser.  If unspecified http://localhost:port is used.\r\nIf a port is specified, it needs to be specified here as well.</value>
  </data>
  <data name="NodeExeArguments" xml:space="preserve">
    <value>Node.exe options</value>
  </data>
  <data name="NodeExeArgumentsDescription" xml:space="preserve">
    <value>Specifies the options provided to node.exe, such as -e or -i.</value>
  </data>
  <data name="NodeExeArgumentsToolTip" xml:space="preserve">
    <value>Specifies the options provided to node.exe, such as -e or -i.</value>
  </data>
  <data name="NodeExePath" xml:space="preserve">
    <value>Node.exe path</value>
  </data>
  <data name="NodeExePathToolTip" xml:space="preserve">
    <value>Specifies the path to the node.exe executable.</value>
  </data>
  <data name="NodejsPort" xml:space="preserve">
    <value>Application port</value>
  </data>
  <data name="NodejsNotInstalled" xml:space="preserve">
    <value>Could not find a Node.js runtime on your computer.  Please download and install the current Node.js release from https://nodejs.org, or specify the location of your Node.exe in the Visual Studio Node Project's properties page.</value>
  </data>
  <data name="NodejsPortToolTip" xml:space="preserve">
    <value>Specifies the port number used for process.env.port, if unspecified a random port is generated.</value>
  </data>
  <data name="NpmPackageName" xml:space="preserve">
    <value>Package Name</value>
  </data>
  <data name="NpmPackageNameDescription" xml:space="preserve">
    <value>Name of package, as specified in its package.json.</value>
  </data>
  <data name="NpmPackageVersion" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="NpmPackageVersionDescription" xml:space="preserve">
    <value>Installed version of package.</value>
  </data>
  <data name="NpmPackageRequestedVersionRange" xml:space="preserve">
    <value>Requested Version</value>
  </data>
  <data name="NpmPackageRequestedVersionRangeDescription" xml:space="preserve">
    <value>Version of package requested in package.json belonging to parent package or project.</value>
  </data>
  <data name="NpmPackageNewVersionAvailable" xml:space="preserve">
    <value>Newer Version Available</value>
  </data>
  <data name="NpmPackageNewVersionAvailableDescription" xml:space="preserve">
    <value>Indicates whether or not a newer version of the package is available.</value>
  </data>
  <data name="NpmPackageDescription" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="NpmPackageDescriptionDescription" xml:space="preserve">
    <value>Package description.</value>
  </data>
  <data name="NpmPackageKeywords" xml:space="preserve">
    <value>Keywords</value>
  </data>
  <data name="NpmPackageKeywordsDescription" xml:space="preserve">
    <value>Package keywords.</value>
  </data>
  <data name="NpmPackageAuthor" xml:space="preserve">
    <value>Author</value>
  </data>
  <data name="NpmPackageAuthorDescription" xml:space="preserve">
    <value>Primary or original author of package; there may also be additional contributors.</value>
  </data>
  <data name="NpmPackagePath" xml:space="preserve">
    <value>Path</value>
  </data>
  <data name="NpmPackagePathDescription" xml:space="preserve">
    <value>Location of package on disk.</value>
  </data>
  <data name="NpmPackageType" xml:space="preserve">
    <value>Package Type</value>
  </data>
  <data name="NpmPackageTypeDescription" xml:space="preserve">
    <value>Indicates whether package is global, or locally installed in your project, and whether or not it is a sub-package.</value>
  </data>
  <data name="NpmPackageLinkStatus" xml:space="preserve">
    <value>Link Status</value>
  </data>
  <data name="NpmPackageLinkStatusDescription" xml:space="preserve">
    <value>Indicates whether a package has been linked from globally installed packages.</value>
  </data>
  <data name="NpmPackageIsListedInParentPackageJson" xml:space="preserve">
    <value>Listed As Dependency</value>
  </data>
  <data name="NpmPackageIsListedInParentPackageJsonDescription" xml:space="preserve">
    <value>Indicates whether or not the package is listed as a package.json dependency.</value>
  </data>
  <data name="NpmPackageIsMissing" xml:space="preserve">
    <value>Missing</value>
  </data>
  <data name="NpmPackageIsMissingDescription" xml:space="preserve">
    <value>Indicates whether or not the package is a missing dependency.</value>
  </data>
  <data name="NpmPackageIsDevDependency" xml:space="preserve">
    <value>Dev Dependency</value>
  </data>
  <data name="NpmPackageIsDevDependencyDescription" xml:space="preserve">
    <value>Indicates whether or not the package is a development dependency.</value>
  </data>
  <data name="NpmPackageIsOptionalDependency" xml:space="preserve">
    <value>Optional Dependency</value>
  </data>
  <data name="NpmPackageIsOptionalDependencyDescription" xml:space="preserve">
    <value>Indicates whether or not the package is an optional dependency.</value>
  </data>
  <data name="NpmPackageIsBundledDependency" xml:space="preserve">
    <value>Bundled Dependency</value>
  </data>
  <data name="NpmPackageIsBundledDependencyDescription" xml:space="preserve">
    <value>Indicates whether or not the package is a bundled dependency.</value>
  </data>
  <data name="CategoryVersion" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="CategoryStatus" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="PackageTypeLocal" xml:space="preserve">
    <value>Local</value>
  </data>
  <data name="PackageTypeLocalSubpackage" xml:space="preserve">
    <value>Local sub-package</value>
  </data>
  <data name="LinkStatusNotApplicableSubPackages" xml:space="preserve">
    <value>Not applicable for sub-packages.</value>
  </data>
  <data name="LinkStatusUnknown" xml:space="preserve">
    <value>Unknown</value>
  </data>
  <data name="RequestedVersionRangeNone" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="NpmNodePackageInstallation" xml:space="preserve">
    <value>Package Installations</value>
  </data>
  <data name="NpmNodePackageInstallationDescription" xml:space="preserve">
    <value>Indicates whether the node manages local or global npm package installations.</value>
  </data>
  <data name="NpmNodePath" xml:space="preserve">
    <value>Path</value>
  </data>
  <data name="NpmNodePathDescription" xml:space="preserve">
    <value>Base path in which npm packages are installed.</value>
  </data>
  <data name="PackageInstallationLocal" xml:space="preserve">
    <value>Local</value>
  </data>
  <data name="PropertiesClassLocalPackage" xml:space="preserve">
    <value>Local Package Properties</value>
  </data>
  <data name="PropertiesClassLocalSubPackage" xml:space="preserve">
    <value>Local Sub-Package Properties</value>
  </data>
  <data name="PropertiesClassNpm" xml:space="preserve">
    <value>npm Packages Properties</value>
  </data>
  <data name="ScriptArgumentsToolTip" xml:space="preserve">
    <value>Specifies the arguments passed to the script on launch.</value>
  </data>
  <data name="ScriptFileTooltip" xml:space="preserve">
    <value>Specifies the script run on launch.</value>
  </data>
  <data name="StartBrowserToolTip" xml:space="preserve">
    <value>When checked a web browser is opened on launch</value>
  </data>
  <data name="WorkingDirToolTip" xml:space="preserve">
    <value>Specifies the working directory where the node.exe process is launched.</value>
  </data>
  <data name="NodeExeDoesntExist" xml:space="preserve">
    <value>Your project is currently configured to look for Node.exe at "{0}" but the file does not exist.</value>
  </data>
  <data name="NodejsToolsForVisualStudio" xml:space="preserve">
    <value>Node.js Tools for Visual Studio</value>
  </data>
  <data name="NodeExePathNotFound" xml:space="preserve">
    <value>The specified Node.js interpreter does not exist.</value>
  </data>
  <data name="NodejsNotInstalledShort" xml:space="preserve">
    <value>Node.js has not been detected on your computer</value>
    <comment>Used in general property page when Node.exe isn't found</comment>
  </data>
  <data name="InvalidPortNumber" xml:space="preserve">
    <value>Invalid port number - the port should contain only digits.</value>
  </data>
  <data name="WorkingDirInvalidOrMissing" xml:space="preserve">
    <value>The specified working directory is invalid or missing.</value>
  </data>
  <data name="CatalogLoadingDefault" xml:space="preserve">
    <value>Loading published package list...</value>
  </data>
  <data name="NoKeywordsInPackage" xml:space="preserve">
    <value>(This package has no keywords.)</value>
  </data>
  <data name="PackageCatalogRefreshing" xml:space="preserve">
    <value>Currently refreshing</value>
  </data>
  <data name="PackageCatalogRefresh0Days" xml:space="preserve">
    <value>Today at {0:t}</value>
  </data>
  <data name="PackageCatalogRefresh1Day" xml:space="preserve">
    <value>Yesterday at {0:t}</value>
  </data>
  <data name="PackageCatalogRefresh2To7Days" xml:space="preserve">
    <value>{0} days ago</value>
  </data>
  <data name="PackageCatalogRefresh1Week" xml:space="preserve">
    <value>More than 1 week ago</value>
  </data>
  <data name="PackageCatalogRefresh2Weeks" xml:space="preserve">
    <value>More than 2 weeks ago</value>
  </data>
  <data name="PackageCatalogRefresh3Weeks" xml:space="preserve">
    <value>More than 3 weeks ago</value>
  </data>
  <data name="PackageCatalogRefresh1Month" xml:space="preserve">
    <value>More than 1 month ago</value>
  </data>
  <data name="PackageCatalogRefresh3Months" xml:space="preserve">
    <value>More than 3 months ago</value>
  </data>
  <data name="NpmSuccessfullyCompleted" xml:space="preserve">
    <value>{0} successfully completed</value>
  </data>
  <data name="NpmStatusReady" xml:space="preserve">
    <value>Ready</value>
  </data>
  <data name="NpmStatusReadyWithErrors" xml:space="preserve">
    <value>Ready - Command(s) completed with errors ({0})</value>
  </data>
  <data name="NpmStatusExecutingQueued" xml:space="preserve">
    <value>Executing: {0} ({1} command(s) queued)</value>
  </data>
  <data name="NpmStatusExecutingErrors" xml:space="preserve">
    <value>Errors Encountered ({1}) - Executing: {0}</value>
  </data>
  <data name="NpmStatusExecutingQueuedErrors" xml:space="preserve">
    <value>Errors Encountered ({2}) - Executing: {0} ({1} command(s) queued)</value>
  </data>
  <data name="TestFramework" xml:space="preserve">
    <value>Test Framework</value>
  </data>
  <data name="TestFrameworkDescription" xml:space="preserve">
    <value>Specifies the test framework this file applies to.</value>
  </data>
  <data name="DebuggerPort" xml:space="preserve">
    <value>Specifies the port used to communicate with the debugger</value>
  </data>
  <data name="EnvironmentVariables" xml:space="preserve">
    <value>Specifies environment variables to be set in the spawned process in the form:

NAME1=value1
NAME2=value2
...</value>
  </data>
  <data name="DebuggerConnectionClosed" xml:space="preserve">
    <value>Debugger connection was closed.</value>
  </data>
  <data name="DebuggerModuleUpdateFailed" xml:space="preserve">
    <value>Failed to update file contents.</value>
  </data>
  <data name="NodejsNotSupported" xml:space="preserve">
    <value>This version of Node.js ({0}) is not supported. Please upgrade to Node.js v0.10.20 or later.</value>
  </data>
  <data name="PackageCatalogRefreshFailed" xml:space="preserve">
    <value>Refresh failed - see output below for details</value>
  </data>
  <data name="NodeExePathDescription" xml:space="preserve">
    <value>Specifies the path to the node.exe executable.</value>
  </data>
  <data name="NodejsPortDescription" xml:space="preserve">
    <value>Specifies the port number used for process.env.port, if unspecified a random port is generated.</value>
  </data>
  <data name="NpmPackageInstallHelpMessage" xml:space="preserve">
    <value>(enter arguments above)</value>
  </data>
  <data name="CacheDirectoryClearFailedTitle" xml:space="preserve">
    <value>Could Not Clear Node.js Cache Directory</value>
  </data>
  <data name="CacheDirectoryClearFailedCaption" xml:space="preserve">
    <value>Could not clear Node.js cache directory. Try manually deleting the directory: {0}</value>
  </data>
  <data name="UpgradedEnvironmentVariables" xml:space="preserve">
    <value>Replaced &lt;EnvironmentVariables&gt; property with &lt;Environment&gt;. This project will no longer work with NTVS 1.0 beta 2 or below.</value>
  </data>
  <data name="StatusAnalysisUpToDate" xml:space="preserve">
    <value>Node.js code analysis is up to date, analyzed {0:N0} function(s) in {1}</value>
  </data>
  <data name="IncludeNodeModulesCancelTitle" xml:space="preserve">
    <value>Do nothing (recommended)</value>
  </data>
  <data name="IncludeNodeModulesContent" xml:space="preserve">
    <value>Including 'node_modules' in your project is generally unnecessary, and may reduce Visual Studio's performance. You can continue to use and deploy packages from 'node_modules' without including it in your project.</value>
  </data>
  <data name="IncludeNodeModulesIncludeDescription" xml:space="preserve">
    <value>This may be a long-running operation, during which Visual Studio will be unusable.</value>
  </data>
  <data name="IncludeNodeModulesIncludeTitle" xml:space="preserve">
    <value>Include 'node_modules' folder in project</value>
  </data>
  <data name="IncludeNodeModulesInformation" xml:space="preserve">
    <value>&lt;a href="http://go.microsoft.com/fwlink/?LinkID=518083"&gt;More Information&lt;/a&gt;</value>
  </data>
  <data name="RemoteDebugProxyFileDoesNotExist" xml:space="preserve">
    <value>Remote Debug Proxy "{0}" does not exist.</value>
  </data>
  <data name="RemoteDebugProxyFolderDoesNotExist" xml:space="preserve">
    <value>Could not find RemoteDebugProxyFolder</value>
  </data>
  <data name="StatusTypingsLoaded" xml:space="preserve">
    <value>Node.js IntelliSense typings folder is up to date</value>
  </data>
  <data name="StatusTypingsLoading" xml:space="preserve">
    <value>Loading Node.js IntelliSense typings for npm packages...</value>
  </data>
  <data name="TypeScriptMinVersionNotInstalled" xml:space="preserve">
    <value>Node.js Tools requires TypeScript for Visual Studio {0} or higher. Please ensure TypeScript is installed</value>
  </data>
  <data name="ImportingProjectStatusText" xml:space="preserve">
    <value>Importing project...</value>
  </data>
  <data name="ImportingProjectErrorStatusText" xml:space="preserve">
    <value>An error occurred and your project was not created.</value>
  </data>
  <data name="ImportingProjectAccessErrorStatusText" xml:space="preserve">
    <value>Some file paths could not be accessed.{0}Try moving your source code to a location where you can read and write files.</value>
  </data>
  <data name="ImportingProjectUnexpectedErrorMessage" xml:space="preserve">
    <value>An unexpected error {0} occurred while creating your project.</value>
  </data>
  <data name="NodeModulesCouldNotParsePackageJsonErrorMessageText" xml:space="preserve">
    <value>Unable to parse {0} from your project.  Please fix any errors and try again.</value>
  </data>
  <data name="NpmNotInstalledMessageCaption" xml:space="preserve">
    <value>npm Not Installed</value>
  </data>
  <data name="NpmNotInstalledMessageText" xml:space="preserve">
    <value>Could not find npm.cmd. Ensure you have a recent version of node.js installed and have specified the location of node.exe in the project properties, or that it is available on your system PATH.

The following error occurred trying to execute npm.cmd:

{0}</value>
  </data>
  <data name="RemoteDebugCheckProxyAndPortErrorMessage" xml:space="preserve">
    <value>Make sure that the process is running behind the remote debug proxy (RemoteDebug.js), and the debugger port (default {0}) is open on the target host.</value>
  </data>
  <data name="RemoteDebugCouldNotAttachErrorMessage" xml:space="preserve">
    <value>Could not attach to Node.js process at {0}{1}

</value>
  </data>
  <data name="RemoteDebugEnableWebSocketsErrorMessage" xml:space="preserve">
    <value>Make sure that the Azure web site is deployed in the Debug configuration, and web sockets are enabled for it in the Azure management portal.</value>
  </data>
  <data name="RemoteDebugUnsupportedPlatformErrorMessage" xml:space="preserve">
    <value>Remote debugging of node.js Microsoft Azure applications is only supported on Windows 8 and above.</value>
  </data>
  <data name="DebugCouldNotResolveStartupFileErrorMessage" xml:space="preserve">
    <value>Please select a startup file to launch by right-clicking the file in Solution Explorer and selecting 'Set as Node.js Startup File' or by modifying your configuration in project properties</value>
  </data>
  <data name="DebugInterpreterDoesNotExistErrorMessage" xml:space="preserve">
    <value>Interpreter "{0}" does not exist.</value>
  </data>
  <data name="DebugTypeScriptCombineNotSupportedWarningMessage" xml:space="preserve">
    <value>This TypeScript project has 'Combine Javascript output into file' option enabled. This option is not supported by NTVS debugger, and may result in erratic behavior of breakpoints, stepping, and debug tool windows. Are you sure you want to start debugging?</value>
  </data>
  <data name="DebugWorkingDirectoryDoesNotExistErrorMessage" xml:space="preserve">
    <value>Working directory "{0}" does not exist.</value>
  </data>
  <data name="DependencyNodeLabelBundled" xml:space="preserve">
    <value>bundled</value>
  </data>
  <data name="DependencyNodeLabelMissing" xml:space="preserve">
    <value>missing</value>
  </data>
  <data name="DependencyNodeLabelNotListed" xml:space="preserve">
    <value>not listed in {0}</value>
  </data>
  <data name="DependencyNodeModuleDoesNotExist" xml:space="preserve">
    <value>Path to module does not exist:
{0}</value>
  </data>
  <data name="ErrorInvalidLaunchUrl" xml:space="preserve">
    <value>Launch url '{0}' is not valid </value>
  </data>
  <data name="PropertiesNodeExeOptions" xml:space="preserve">
    <value>N&amp;ode.exe options:</value>
  </data>
  <data name="PropertiesNodeExePath" xml:space="preserve">
    <value>Node.exe &amp;path:</value>
  </data>
  <data name="PropertiesDebuggerPort" xml:space="preserve">
    <value>&amp;Debugger port:</value>
  </data>
  <data name="PropertiesEnvVars" xml:space="preserve">
    <value>Environment &amp;Variables:</value>
  </data>
  <data name="PropertiesLaunchUrl" xml:space="preserve">
    <value>Launch &amp;URL:</value>
  </data>
  <data name="PropertiesNodePort" xml:space="preserve">
    <value>Applica&amp;tion port:</value>
  </data>
  <data name="PropertiesScript" xml:space="preserve">
    <value>&amp;Script (startup file):</value>
  </data>
  <data name="PropertiesScriptArgs" xml:space="preserve">
    <value>Script ar&amp;guments:</value>
  </data>
  <data name="PropertiesStartBrowser" xml:space="preserve">
    <value>Sta&amp;rt web browser on launch</value>
  </data>
  <data name="PropertiesWorkingDir" xml:space="preserve">
    <value>Working director&amp;y:</value>
  </data>
  <data name="PropertiesBrowsePathAccessibleName" xml:space="preserve">
    <value>Browse for node.exe</value>
  </data>
  <data name="PropertiesBrowseDirectoryAccessibleName" xml:space="preserve">
    <value>Browse for working directory</value>
  </data>
  <data name="PackageJsonNotCheckedOutCaption" xml:space="preserve">
    <value>Package.json not checked out</value>
  </data>
  <data name="PackageJsonNotCheckedOutMessage" xml:space="preserve">
    <value>Failed to check out 'package.json'. Please ensure the file is checked out, before adding or removing NPM packages.</value>
  </data>
  <data name="NpmSpecifyValidProject" xml:space="preserve">
    <value>Please specify a valid Node.js project or project directory. If your solution contains multiple projects, specify a target project using .npm [ProjectName or ProjectDir] &lt;npm arguments&gt; For example: .npm [MyApp] list.</value>
  </data>
  <data name="NpmExecuteCommand" xml:space="preserve">
    <value>Executes npm command. If solution contains multiple projects, specify target project using .npm [ProjectName] &lt;npm arguments&gt;</value>
  </data>
  <data name="NodejsNotInstalledAnyCode" xml:space="preserve">
    <value>Could not find a Node.js runtime on your computer.  Please download and install the current Node.js release from 'https://nodejs.org', or specify the location of your Node.exe in the '{0}' file.</value>
    <comment>Template contains a filename, like launch.json</comment>
  </data>
  <data name="DebuggerAttachToDescription" xml:space="preserve">
    <value>Allows attaching to Node.js processes running behind a remote debug proxy (RemoteDebug.js). Related documentation can be found under the 'Tools\Node.js Tool\Remote Debug Proxy' menu. Specify the target hostname and debugger port in the 'Qualifier' textbox, e.g. 'targethost: {0}'. This transport is not secure, and should not be used on a network that might have hostile traffic.</value>
  </data>
  <data name="ConfigureProjectProperties" xml:space="preserve">
    <value>Configure project properties</value>
  </data>
  <data name="DownloadNodejs" xml:space="preserve">
    <value>Download Node.js</value>
  </data>
  <data name="NodejsNotInstalledInfoBar" xml:space="preserve">
    <value>Could not find a Node.js runtime on your computer. Please install Node.js and restart VS, or specify the location of node.exe in the project properties page.</value>
  </data>
  <data name="NodeHeader" xml:space="preserve">
    <value>Node</value>
  </data>
  <data name="StartActionHeader" xml:space="preserve">
    <value>Start Action</value>
  </data>
  <data name="BrowseWorkingDirDialogTitle" xml:space="preserve">
    <value>Select Working Dir</value>
  </data>
  <data name="SaveNodeSettingsInProjectFile" xml:space="preserve">
    <value>&amp;Apply Node.js settings to all users (save in project file)</value>
  </data>
  <data name="SaveInProjectFileToolTip" xml:space="preserve">
    <value>When checked the Node.js specific properties are saved per user</value>
  </data>
  <data name="TscBuildCanceled" xml:space="preserve">
    <value>Build Canceled</value>
  </data>
  <data name="TscBuildCompleted" xml:space="preserve">
    <value>Build Completed</value>
  </data>
  <data name="TscBuildError" xml:space="preserve">
    <value>Error - Failed to start '{0}'</value>
    <comment>Template is substituted with path to tsc.exe</comment>
  </data>
  <data name="TscBuildStarted" xml:space="preserve">
    <value>Build Started</value>
  </data>
  <data name="PropertiesBrowseTestRootAccessibleName" xml:space="preserve">
    <value>Browse for test root</value>
  </data>
  <data name="TestRoot" xml:space="preserve">
    <value>Test Root</value>
  </data>
  <data name="UnitTestHeader" xml:space="preserve">
    <value>JavaScript Unit Test</value>
  </data>
  <data name="TestFrameworkToolTip" xml:space="preserve">
    <value>Specifies the framework used for the unit tests.</value>
  </data>
  <data name="TestRootToolTip" xml:space="preserve">
    <value>Specifies the directory where the unit tests are located.</value>
  </data>
  <data name="NpmIsInstalling" xml:space="preserve">
    <value>Debugging could not be started because npm is installing packages. Please wait until npm finishes and try again.</value>
  </data>
  <data name="WarningDialogCaption" xml:space="preserve">
    <value>Microsoft Visual Studio</value>
    <comment>Caption displayed on the error dialog of the project properties.</comment>
  </data>
  <data name="ExecutingNpmCommandMessage" xml:space="preserve">
    <value>Executing npm command</value>
  </data>
  <data name="ErrorDebuggingNode7NotSupported" xml:space="preserve">
    <value>Debugging Node 7 and below is not supported. Current Node version is {0}.</value>
  </data>
</root>